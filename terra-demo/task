Date: 09-10-2023
Topic: terraform task
           creating resources  , vpc , two subnets , route , gateway , security group , two instances , local directory 


terraform official website:   https://developer.hashicorp.com/terraform/downloads



wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update && sudo apt install terraform




ubuntu $ wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
--2023-10-09 08:54:11--  https://apt.releases.hashicorp.com/gpg
Resolving apt.releases.hashicorp.com (apt.releases.hashicorp.com)... 65.9.95.10, 65.9.95.70, 65.9.95.69, ...
Connecting to apt.releases.hashicorp.com (apt.releases.hashicorp.com)|65.9.95.10|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3980 (3.9K) [binary/octet-stream]
Saving to: 'STDOUT'

-                                        100%[=================================================================================>]   3.89K  --.-KB/s    in 0s      

2023-10-09 08:54:11 (144 MB/s) - written to stdout [3980/3980]

ubuntu $ echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com focal main
ubuntu $ sudo apt update && sudo apt install terraform
Hit:1 http://archive.ubuntu.com/ubuntu focal InRelease
Hit:2 http://archive.ubuntu.com/ubuntu focal-updates InRelease                                                                    
Hit:3 http://archive.ubuntu.com/ubuntu focal-backports InRelease                                                                  
Get:4 https://apt.releases.hashicorp.com focal InRelease [12.9 kB]                                                                
Hit:5 http://security.ubuntu.com/ubuntu focal-security InRelease                  
Get:6 https://apt.releases.hashicorp.com focal/main amd64 Packages [100 kB]
Fetched 113 kB in 0s (245 kB/s)
Reading package lists... Done
Building dependency tree       
Reading state information... Done
150 packages can be upgraded. Run 'apt list --upgradable' to see them.
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following NEW packages will be installed:
  terraform
0 upgraded, 1 newly installed, 0 to remove and 150 not upgraded.
Need to get 25.6 MB of archives.
After this operation, 80.7 MB of additional disk space will be used.
Get:1 https://apt.releases.hashicorp.com focal/main amd64 terraform amd64 1.6.0-1 [25.6 MB]
Fetched 25.6 MB in 1s (45.1 MB/s)
Selecting previously unselected package terraform.
(Reading database ... 72793 files and directories currently installed.)
Preparing to unpack .../terraform_1.6.0-1_amd64.deb ...
Unpacking terraform (1.6.0-1) ...
Setting up terraform (1.6.0-1) ...
ubuntu $ vi terraform.tfvars 
ubuntu $ vi vars.tf 
ubuntu $ vi connection.tf 
ubuntu $ vi main.tf 
ubuntu $ terraform init 

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching "5.7.0"...
- Finding latest version of hashicorp/local...
- Installing hashicorp/aws v5.7.0...
- Installed hashicorp/aws v5.7.0 (signed by HashiCorp)
- Installing hashicorp/local v2.4.0...
- Installed hashicorp/local v2.4.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ubuntu $ terraform validate 
Success! The configuration is valid.

ubuntu $ 
ubuntu $ terraform validate 
Success! The configuration is valid.

========================================================================================


ubuntu $ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.vm1 will be created
  + resource "aws_instance" "vm1" {
      + ami                                  = "ami-026ebd4cfe2c043b2"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "oct-7"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "Webserver1"
        }
      + tags_all                             = {
          + "Name" = "Webserver1"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "e853c5cf7dbd997addea98a3eb5e3300e1d7f5d5"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_instance.vm2 will be created
  + resource "aws_instance" "vm2" {
      + ami                                  = "ami-0261755bbcb8c4a84"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "oct-7"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "Webserver2"
        }
      + tags_all                             = {
          + "Name" = "Webserver2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "87d7f16328771e4d228b2650d14ead47c6dffc17"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_internet_gateway.mygetway will be created
  + resource "aws_internet_gateway" "mygetway" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "Unnati_Int_gateway"
        }
      + tags_all = {
          + "Name" = "Unnati_Int_gateway"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.myroute will be created
  + resource "aws_route_table" "myroute" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.route_to_public_sub2 will be created
  + resource "aws_route_table_association" "route_to_public_sub2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.sg1 will be created
  + resource "aws_security_group" "sg1" {
      + arn                    = (known after apply)
      + description            = "Allow ssh and http inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "http from VPC"
              + from_port        = 80
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "ssh from VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "allow_ssh_http"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_http_ssh"
        }
      + tags_all               = {
          + "Name" = "allow_http_ssh"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.unnati_sub1 will be created
  + resource "aws_subnet" "unnati_sub1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Unnati_Private_Subnet1"
        }
      + tags_all                                       = {
          + "Name" = "Unnati_Private_Subnet1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.unnati_sub2 will be created
  + resource "aws_subnet" "unnati_sub2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Unnati_Public_Subnet1"
        }
      + tags_all                                       = {
          + "Name" = "Unnati_Public_Subnet1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.unnati will be created
  + resource "aws_vpc" "unnati" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.1.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "UnnatiNetwork"
        }
      + tags_all                             = {
          + "Name" = "UnnatiNetwork"
        }
    }

  # local_file.terraform_dev will be created
  + resource "local_file" "terraform_dev" {
      + content              = "Hello From Anirudha...! file successfully created..! "
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/home/ubuntu/sample_pro/demo.txt"
      + id                   = (known after apply)
    }

Plan: 10 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
===================================================================================================================================================================
Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ubuntu $ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.vm1 will be created
  + resource "aws_instance" "vm1" {
      + ami                                  = "ami-026ebd4cfe2c043b2"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "oct-7"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "Webserver1"
        }
      + tags_all                             = {
          + "Name" = "Webserver1"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "e853c5cf7dbd997addea98a3eb5e3300e1d7f5d5"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_instance.vm2 will be created
  + resource "aws_instance" "vm2" {
      + ami                                  = "ami-0261755bbcb8c4a84"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "oct-7"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "Webserver2"
        }
      + tags_all                             = {
          + "Name" = "Webserver2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "87d7f16328771e4d228b2650d14ead47c6dffc17"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_internet_gateway.mygetway will be created
  + resource "aws_internet_gateway" "mygetway" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "Unnati_Int_gateway"
        }
      + tags_all = {
          + "Name" = "Unnati_Int_gateway"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.myroute will be created
  + resource "aws_route_table" "myroute" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.route_to_public_sub2 will be created
  + resource "aws_route_table_association" "route_to_public_sub2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.sg1 will be created
  + resource "aws_security_group" "sg1" {
      + arn                    = (known after apply)
      + description            = "Allow ssh and http inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "http from VPC"
              + from_port        = 80
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "ssh from VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "allow_ssh_http"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_http_ssh"
        }
      + tags_all               = {
          + "Name" = "allow_http_ssh"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.unnati_sub1 will be created
  + resource "aws_subnet" "unnati_sub1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Unnati_Private_Subnet1"
        }
      + tags_all                                       = {
          + "Name" = "Unnati_Private_Subnet1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.unnati_sub2 will be created
  + resource "aws_subnet" "unnati_sub2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.1.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "Unnati_Public_Subnet1"
        }
      + tags_all                                       = {
          + "Name" = "Unnati_Public_Subnet1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.unnati will be created
  + resource "aws_vpc" "unnati" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.1.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "UnnatiNetwork"
        }
      + tags_all                             = {
          + "Name" = "UnnatiNetwork"
        }
    }

  # local_file.terraform_dev will be created
  + resource "local_file" "terraform_dev" {
      + content              = "Hello From Anirudha...! file successfully created..! "
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/home/ubuntu/sample_pro/demo.txt"
      + id                   = (known after apply)
    }

Plan: 10 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.terraform_dev: Creating...
local_file.terraform_dev: Creation complete after 0s [id=1c5b8bff2c484c62be769f2a9c8c1c2e0152e210]
aws_vpc.unnati: Creating...
aws_vpc.unnati: Creation complete after 2s [id=vpc-0b78a1bad3ec4f0fa]
aws_security_group.sg1: Creating...
aws_subnet.unnati_sub1: Creating...
aws_internet_gateway.mygetway: Creating...
aws_subnet.unnati_sub2: Creating...
aws_internet_gateway.mygetway: Creation complete after 1s [id=igw-097b0f4bce09a30a6]
aws_route_table.myroute: Creating...
aws_subnet.unnati_sub2: Creation complete after 1s [id=subnet-04abc10a5acbc5527]
aws_subnet.unnati_sub1: Creation complete after 1s [id=subnet-00052e3bee0ca5759]
aws_route_table.myroute: Creation complete after 2s [id=rtb-0d4534a61633a2d92]
aws_route_table_association.route_to_public_sub2: Creating...
aws_security_group.sg1: Creation complete after 3s [id=sg-0e769e854354df462]
aws_instance.vm2: Creating...
aws_instance.vm1: Creating...
aws_route_table_association.route_to_public_sub2: Creation complete after 0s [id=rtbassoc-0bcbb7492cd8014b9]
aws_instance.vm2: Still creating... [10s elapsed]
aws_instance.vm1: Still creating... [10s elapsed]
aws_instance.vm2: Still creating... [20s elapsed]
aws_instance.vm1: Still creating... [20s elapsed]
aws_instance.vm2: Still creating... [30s elapsed]
aws_instance.vm1: Still creating... [30s elapsed]
aws_instance.vm2: Creation complete after 33s [id=i-019f164950329476e]
aws_instance.vm1: Creation complete after 33s [id=i-0574c7dbd11c94d41]

Apply complete! Resources: 10 added, 0 changed, 0 destroyed.

==========================================================================================================================================================================================
==========================================================================================================================================================================================


ubuntu $ 
ubuntu $ ls
connection.tf  filesystem  main.tf  terraform.tfstate  terraform.tfvars  vars.tf
ubuntu $ terraform destroy 
local_file.terraform_dev: Refreshing state... [id=1c5b8bff2c484c62be769f2a9c8c1c2e0152e210]
aws_vpc.unnati: Refreshing state... [id=vpc-0b78a1bad3ec4f0fa]
aws_security_group.sg1: Refreshing state... [id=sg-0e769e854354df462]
aws_subnet.unnati_sub1: Refreshing state... [id=subnet-00052e3bee0ca5759]
aws_subnet.unnati_sub2: Refreshing state... [id=subnet-04abc10a5acbc5527]
aws_internet_gateway.mygetway: Refreshing state... [id=igw-097b0f4bce09a30a6]
aws_route_table.myroute: Refreshing state... [id=rtb-0d4534a61633a2d92]
aws_instance.vm2: Refreshing state... [id=i-019f164950329476e]
aws_instance.vm1: Refreshing state... [id=i-0574c7dbd11c94d41]
aws_route_table_association.route_to_public_sub2: Refreshing state... [id=rtbassoc-0bcbb7492cd8014b9]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.vm1 will be destroyed
  - resource "aws_instance" "vm1" {
      - ami                                  = "ami-026ebd4cfe2c043b2" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:643529747950:instance/i-0574c7dbd11c94d41" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0574c7dbd11c94d41" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - key_name                             = "oct-7" -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-030ba7560edc0c7ef" -> null
      - private_dns                          = "ip-10-1-1-101.ec2.internal" -> null
      - private_ip                           = "10.1.1.101" -> null
      - public_ip                            = "34.238.119.128" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-00052e3bee0ca5759" -> null
      - tags                                 = {
          - "Name" = "Webserver1"
        } -> null
      - tags_all                             = {
          - "Name" = "Webserver1"
        } -> null
      - tenancy                              = "default" -> null
      - user_data                            = "e853c5cf7dbd997addea98a3eb5e3300e1d7f5d5" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-0e769e854354df462",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-04a31b56304d592fb" -> null
          - volume_size           = 10 -> null
          - volume_type           = "gp2" -> null
        }
    }

  # aws_instance.vm2 will be destroyed
  - resource "aws_instance" "vm2" {
      - ami                                  = "ami-0261755bbcb8c4a84" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:643529747950:instance/i-019f164950329476e" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-019f164950329476e" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - key_name                             = "oct-7" -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-09aa796eefe8169e1" -> null
      - private_dns                          = "ip-10-1-1-152.ec2.internal" -> null
      - private_ip                           = "10.1.1.152" -> null
      - public_ip                            = "34.201.33.148" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-00052e3bee0ca5759" -> null
      - tags                                 = {
          - "Name" = "Webserver2"
        } -> null
      - tags_all                             = {
          - "Name" = "Webserver2"
        } -> null
      - tenancy                              = "default" -> null
      - user_data                            = "87d7f16328771e4d228b2650d14ead47c6dffc17" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-0e769e854354df462",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-05cf7baee51c4f7b0" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }
    }

  # aws_internet_gateway.mygetway will be destroyed
  - resource "aws_internet_gateway" "mygetway" {
      - arn      = "arn:aws:ec2:us-east-1:643529747950:internet-gateway/igw-097b0f4bce09a30a6" -> null
      - id       = "igw-097b0f4bce09a30a6" -> null
      - owner_id = "643529747950" -> null
      - tags     = {
          - "Name" = "Unnati_Int_gateway"
        } -> null
      - tags_all = {
          - "Name" = "Unnati_Int_gateway"
        } -> null
      - vpc_id   = "vpc-0b78a1bad3ec4f0fa" -> null
    }

  # aws_route_table.myroute will be destroyed
  - resource "aws_route_table" "myroute" {
      - arn              = "arn:aws:ec2:us-east-1:643529747950:route-table/rtb-0d4534a61633a2d92" -> null
      - id               = "rtb-0d4534a61633a2d92" -> null
      - owner_id         = "643529747950" -> null
      - propagating_vgws = [] -> null
      - route            = [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - core_network_arn           = ""
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = "igw-097b0f4bce09a30a6"
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = ""
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ] -> null
      - tags             = {} -> null
      - tags_all         = {} -> null
      - vpc_id           = "vpc-0b78a1bad3ec4f0fa" -> null
    }

  # aws_route_table_association.route_to_public_sub2 will be destroyed
  - resource "aws_route_table_association" "route_to_public_sub2" {
      - id             = "rtbassoc-0bcbb7492cd8014b9" -> null
      - route_table_id = "rtb-0d4534a61633a2d92" -> null
      - subnet_id      = "subnet-04abc10a5acbc5527" -> null
    }

  # aws_security_group.sg1 will be destroyed
  - resource "aws_security_group" "sg1" {
      - arn                    = "arn:aws:ec2:us-east-1:643529747950:security-group/sg-0e769e854354df462" -> null
      - description            = "Allow ssh and http inbound traffic" -> null
      - egress                 = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = [
                  - "::/0",
                ]
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
            },
        ] -> null
      - id                     = "sg-0e769e854354df462" -> null
      - ingress                = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
            },
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 65535
            },
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "udp"
              - security_groups  = []
              - self             = false
              - to_port          = 65535
            },
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 22
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 22
            },
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = ""
              - from_port        = 80
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 80
            },
        ] -> null
      - name                   = "allow_ssh_http" -> null
      - owner_id               = "643529747950" -> null
      - revoke_rules_on_delete = false -> null
      - tags                   = {
          - "Name" = "allow_http_ssh"
        } -> null
      - tags_all               = {
          - "Name" = "allow_http_ssh"
        } -> null
      - vpc_id                 = "vpc-0b78a1bad3ec4f0fa" -> null
    }

  # aws_subnet.unnati_sub1 will be destroyed
  - resource "aws_subnet" "unnati_sub1" {
      - arn                                            = "arn:aws:ec2:us-east-1:643529747950:subnet/subnet-00052e3bee0ca5759" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1a" -> null
      - availability_zone_id                           = "use1-az2" -> null
      - cidr_block                                     = "10.1.1.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-00052e3bee0ca5759" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "643529747950" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Name" = "Unnati_Private_Subnet1"
        } -> null
      - tags_all                                       = {
          - "Name" = "Unnati_Private_Subnet1"
        } -> null
      - vpc_id                                         = "vpc-0b78a1bad3ec4f0fa" -> null
    }

  # aws_subnet.unnati_sub2 will be destroyed
  - resource "aws_subnet" "unnati_sub2" {
      - arn                                            = "arn:aws:ec2:us-east-1:643529747950:subnet/subnet-04abc10a5acbc5527" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "us-east-1b" -> null
      - availability_zone_id                           = "use1-az4" -> null
      - cidr_block                                     = "10.1.2.0/24" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-04abc10a5acbc5527" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = false -> null
      - owner_id                                       = "643529747950" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {
          - "Name" = "Unnati_Public_Subnet1"
        } -> null
      - tags_all                                       = {
          - "Name" = "Unnati_Public_Subnet1"
        } -> null
      - vpc_id                                         = "vpc-0b78a1bad3ec4f0fa" -> null
    }

  # aws_vpc.unnati will be destroyed
  - resource "aws_vpc" "unnati" {
      - arn                                  = "arn:aws:ec2:us-east-1:643529747950:vpc/vpc-0b78a1bad3ec4f0fa" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "10.1.0.0/16" -> null
      - default_network_acl_id               = "acl-0ca1ded2598611a0b" -> null
      - default_route_table_id               = "rtb-0f744fb4bf2f30f1e" -> null
      - default_security_group_id            = "sg-08f1e4faec350e4a2" -> null
      - dhcp_options_id                      = "dopt-015045476cab5eaca" -> null
      - enable_dns_hostnames                 = false -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-0b78a1bad3ec4f0fa" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-0f744fb4bf2f30f1e" -> null
      - owner_id                             = "643529747950" -> null
      - tags                                 = {
          - "Name" = "UnnatiNetwork"
        } -> null
      - tags_all                             = {
          - "Name" = "UnnatiNetwork"
        } -> null
    }

  # local_file.terraform_dev will be destroyed
  - resource "local_file" "terraform_dev" {
      - content              = "Hello From Anirudha...! file successfully created..! " -> null
      - content_base64sha256 = "YeS/Q2Z+HO5vzN8xPrK2yCteMZgDfEBdSHNe1rVLyDA=" -> null
      - content_base64sha512 = "k8meMgYBTJTBx+U3bnpKSZ1IcC7uXz4oaQpKxWKcRmEywuk+N3r9bP/TBKzXHrr6FgnnPSRgUoYmXr7Ak1eSnw==" -> null
      - content_md5          = "bccff4f29d2902e521c26172241b7653" -> null
      - content_sha1         = "1c5b8bff2c484c62be769f2a9c8c1c2e0152e210" -> null
      - content_sha256       = "61e4bf43667e1cee6fccdf313eb2b6c82b5e3198037c405d48735ed6b54bc830" -> null
      - content_sha512       = "93c99e3206014c94c1c7e5376e7a4a499d48702eee5f3e28690a4ac5629c466132c2e93e377afd6cffd304acd71ebafa1609e73d24605286265ebec09357929f" -> null
      - directory_permission = "0777" -> null
      - file_permission      = "0777" -> null
      - filename             = "/home/ubuntu/sample_pro/demo.txt" -> null
      - id                   = "1c5b8bff2c484c62be769f2a9c8c1c2e0152e210" -> null
    }

Plan: 0 to add, 0 to change, 10 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

local_file.terraform_dev: Destroying... [id=1c5b8bff2c484c62be769f2a9c8c1c2e0152e210]
local_file.terraform_dev: Destruction complete after 0s
aws_instance.vm1: Destroying... [id=i-0574c7dbd11c94d41]
aws_instance.vm2: Destroying... [id=i-019f164950329476e]
aws_route_table_association.route_to_public_sub2: Destroying... [id=rtbassoc-0bcbb7492cd8014b9]
aws_route_table_association.route_to_public_sub2: Destruction complete after 1s
aws_subnet.unnati_sub2: Destroying... [id=subnet-04abc10a5acbc5527]
aws_route_table.myroute: Destroying... [id=rtb-0d4534a61633a2d92]
aws_subnet.unnati_sub2: Destruction complete after 1s
aws_route_table.myroute: Destruction complete after 1s
aws_internet_gateway.mygetway: Destroying... [id=igw-097b0f4bce09a30a6]
aws_instance.vm1: Still destroying... [id=i-0574c7dbd11c94d41, 10s elapsed]
aws_instance.vm2: Still destroying... [id=i-019f164950329476e, 10s elapsed]
aws_internet_gateway.mygetway: Still destroying... [id=igw-097b0f4bce09a30a6, 10s elapsed]
aws_instance.vm1: Still destroying... [id=i-0574c7dbd11c94d41, 20s elapsed]
aws_instance.vm2: Still destroying... [id=i-019f164950329476e, 20s elapsed]
aws_internet_gateway.mygetway: Still destroying... [id=igw-097b0f4bce09a30a6, 20s elapsed]
aws_internet_gateway.mygetway: Destruction complete after 28s
aws_instance.vm1: Still destroying... [id=i-0574c7dbd11c94d41, 30s elapsed]
aws_instance.vm2: Still destroying... [id=i-019f164950329476e, 30s elapsed]
aws_instance.vm1: Destruction complete after 32s
aws_instance.vm2: Still destroying... [id=i-019f164950329476e, 40s elapsed]
aws_instance.vm2: Destruction complete after 42s
aws_security_group.sg1: Destroying... [id=sg-0e769e854354df462]
aws_subnet.unnati_sub1: Destroying... [id=subnet-00052e3bee0ca5759]
aws_subnet.unnati_sub1: Destruction complete after 1s
aws_security_group.sg1: Destruction complete after 1s
aws_vpc.unnati: Destroying... [id=vpc-0b78a1bad3ec4f0fa]
aws_vpc.unnati: Destruction complete after 1s

Destroy complete! Resources: 10 destroyed.
ubuntu $ ls
connection.tf  filesystem  main.tf  terraform.tfstate  terraform.tfstate.backup  terraform.tfvars  vars.tf


=====================================================================================================================================================================


ubuntu $ cat terraform.tfvars
myregion="us-east-1"
myaccesskey="AKIAZLVK4VXXFZU3VU73"
mysecretkey="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"

ubuntu $ cat  vars.tf
variable "myregion" {
description = "Region Name"
}

variable "myaccesskey" {
sensitive = true 
}

variable "mysecretkey" {
sensitive = true
}


ubuntu $ cat connection.tf
terraform {
   required_providers  {
     aws = {
     source = "hashicorp/aws"
     version = "5.7.0"
    }
   }
  }

provider "aws"  {
        region = var.myregion
        access_key = var.myaccesskey 
        secret_key = var.mysecretkey 
}

ubuntu $ cat  

=================================================================================================================================================

ubuntu $ cat  main.tf
### VPC Creation 
resource  "aws_vpc"  "unnati" {
          instance_tenancy = "default"
          cidr_block = "10.1.0.0/16"
          tags = {
                 Name = "UnnatiNetwork"
           }
  }



### Internet Gateway
resource "aws_internet_gateway" "mygetway" {
   vpc_id = aws_vpc.unnati.id

    tags = {
      Name = "Unnati_Int_gateway"
  }
 }



###  Subnet on two  AZ
###  Unnati Private subnet1
resource "aws_subnet"  "unnati_sub1" {
  vpc_id = aws_vpc.unnati.id
  cidr_block = "10.1.1.0/24"
  availability_zone = "us-east-1a"
  
  tags = {
    Name = "Unnati_Private_Subnet1"
   }
  }


###  Unnati Public  subnet1
resource "aws_subnet"  "unnati_sub2" {
  vpc_id = aws_vpc.unnati.id
  cidr_block = "10.1.2.0/24"
  availability_zone = "us-east-1b"
  
  tags = {
    Name = "Unnati_Public_Subnet1"
   }
  }


### Route Table
 resource "aws_route_table" "myroute" { 
  vpc_id = aws_vpc.unnati.id
  route {
     cidr_block = "0.0.0.0/0"
     gateway_id = aws_internet_gateway.mygetway.id
      }
    }

### Route Table Association With subnet 
resource "aws_route_table_association" "route_to_public_sub2" { 
   subnet_id = aws_subnet.unnati_sub2.id
   route_table_id = aws_route_table.myroute.id 
   }
  

###  Security Group 
resource  "aws_security_group"  "sg1" { 
  name  = "allow_ssh_http" 
  description = "Allow ssh and http inbound traffic" 
 vpc_id  = aws_vpc.unnati.id


 ingress  { 
   description  =  "ssh from VPC"
   from_port    = 22
   to_port      = 22
   protocol     = "tcp"
   cidr_blocks  = ["0.0.0.0/0"]
   ipv6_cidr_blocks = ["::/0"]
   }

  egress  {
   from_port   = 0 
   to_port     = 0
   protocol    = "-1"
   cidr_blocks = ["0.0.0.0/0"]
   ipv6_cidr_blocks = ["::/0"]

 }
 
 ingress  { 
   description  =  "http from VPC"
   from_port    = 80
   to_port      = 80
   protocol     = "tcp"
   cidr_blocks  = ["0.0.0.0/0"]
   ipv6_cidr_blocks = ["::/0"]
   }

  egress  {
   from_port   = 0 
   to_port     = 0
   protocol    = "-1"
   cidr_blocks = ["0.0.0.0/0"]
   ipv6_cidr_blocks = ["::/0"]

 }


  tags = {
   Name = "allow_http_ssh" 
  }
 }





### Instance as webserver on RHEL9
 resource "aws_instance" "vm1"  {
     ami  =  "ami-026ebd4cfe2c043b2"
     instance_type = "t2.micro"
     associate_public_ip_address = true 
     key_name = "oct-7"
     subnet_id =  aws_subnet.unnati_sub1.id
     vpc_security_group_ids = [aws_security_group.sg1.id]
     user_data = <<-EOF
      #!/bin/bash 
     sudo  dnf install httpd  -y
     echo  "Hello from  Anirudha...!  on  RHEL9 Web server... Welcome to all..!"  > /var/www/html/index.html 
     sudo  systemctl restart httpd
     sudo  systemctl enable httpd
     EOF  
     tags = { 
      Name = "Webserver1"
       }
    }
  


### Instance as webserver on  Ubuntu
 resource "aws_instance" "vm2"  {
     ami  =  "ami-0261755bbcb8c4a84"
     instance_type = "t2.micro"
     associate_public_ip_address = true
     key_name = "oct-7"
     subnet_id =  aws_subnet.unnati_sub1.id
     vpc_security_group_ids = [aws_security_group.sg1.id]
     user_data = <<-EOF
      #!/bin/bash 
     sudo  apt update
     sudo  apt  install  apache2 -y 
     echo  "Hello from  Anirudha...!  on  Ubuntu Web server....  Welcome to all...!"  > /var/www/html/index.html
     echo  "Hello This is Aniudha Here ... !"  >  /var/www/html/file.txt 
     sudo  systemctl restart apache2
     sudo systemctl enable apache2
     EOF  
     tags = { 
      Name = "Webserver2"
       }
    }



 #### creating local  file on Ubuntu 

    resource "local_file" "terraform_dev" {
          filename = "/home/ubuntu/sample_pro/demo.txt"
          content = "Hello From Anirudha...! file successfully created..! "

  }


============================================================================
===================================================================================
